package com.vedidev.nativebridge;import com.google.android.gms.ads.InterstitialAd;import com.google.android.gms.ads.AdView;import com.google.android.gms.ads.AdSize;import com.google.android.gms.ads.AdRequest;import com.google.android.gms.ads.*;import android.app.Activity;import android.content.Context;import android.content.Intent;import android.graphics.Color;import android.util.Log;import android.widget.LinearLayout;import android.view.ViewGroup.LayoutParams;import android.widget.RelativeLayout;import android.view.Gravity;import android.view.View;import org.json.JSONObject;import com.vedidev.nativebridge.Bunch;import com.vedidev.nativebridge.ProcessorEngine;import java.util.ArrayList;/** * @author smallkot *         date 19/12/14 */@SuppressWarnings("UnusedDeclaration")public class AdmobBunch implements Bunch {    private static AdmobBunch  _appActiviy;    private AdView adView;    private static RelativeLayout _layout = null;    private RelativeLayout _bannerLayout = null;    final private static int kGADAdSizeInvalid = 0;    final private static int kGADAdSizeBanner = 1;    final private static int kGADAdSizeMediumRectangle = 2;    final private static int kGADAdSizeFullBanner = 3;    final private static int kGADAdSizeLeaderboard = 4;    final private static int kGADAdSizeSkyscraper = 5;    final private static int kGADAdSizeSmartBannerPortrait = 6;    final private static int kGADAdSizeSmartBannerLandscape = 7;    private static final int kBannerGravityNone = -1;    private static final int kBannerGravityTopLeft = 0;    private static final int kBannerGravityCenterLeft = 1;    private static final int kBannerGravityBottomLeft = 2;    private static final int kBannerGravityTopCenter = 3;    private static final int kBannerGravityCenter = 4;    private static final int kBannerGravityBottomCenter = 5;    private static final int kBannerGravityTopRight = 6;    private static final int kBannerGravityCenterRight = 7;    private static final int kBannerGravityBottomRight = 8;    private Context context;    private Activity activity;    private ArrayList<InterstitialAd> interstitial = null;    public AdmobBunch() {        registerProcessor("createBanner", new ProcessorEngine.CallHandler() {            @Override            public void handle(JSONObject params, JSONObject retParams) throws Exception {                String adUnitID = params.getString("adUnitID");                int adSizeBanner = params.getInt("adSizeBanner");                createBanner(adUnitID, adSizeBanner);            }        });        registerProcessor("showBanner", new ProcessorEngine.CallHandler() {            @Override            public void handle(JSONObject params, JSONObject retParams) throws Exception {                int mX = params.getInt("mX");                int mY = params.getInt("mY");                int mWidth = params.getInt("mWidth");                int mHeight = params.getInt("mHeight");                int mGravity = params.getInt("mGravity");                showBanner(mX, mY, mWidth, mHeight, mGravity);            }        });        registerProcessor("hideBanner", new ProcessorEngine.CallHandler() {            @Override            public void handle(JSONObject params, JSONObject retParams) throws Exception {                hideBanner();            }        });        registerProcessor("createInterstitial", new ProcessorEngine.CallHandler() {            @Override            public void handle(JSONObject params, JSONObject retParams) throws Exception {                String adUnitID = params.getString("adUnitID");                createInterstitial(adUnitID);            }        });        registerProcessor("showInterstitial", new ProcessorEngine.CallHandler() {            @Override            public void handle(JSONObject params, JSONObject retParams) throws Exception {                showInterstitial();            }        });    }    private void createBanner(final String adUnitID, final int size) {        _appActiviy = this;        if(this.activity!=null)        {            this.activity.runOnUiThread(new Runnable() {                @Override                public void run() {                    AdSize bannerSize = AdSize.BANNER;                    switch(size)                    {                        case kGADAdSizeBanner:                            bannerSize = AdSize.BANNER;                            break;                        case kGADAdSizeMediumRectangle:                            bannerSize = AdSize.MEDIUM_RECTANGLE;                            break;                        case kGADAdSizeFullBanner:                            bannerSize = AdSize.FULL_BANNER;                            break;                        case kGADAdSizeLeaderboard:                            bannerSize = AdSize.LEADERBOARD;                            break;                        case kGADAdSizeSkyscraper:                            bannerSize = AdSize.WIDE_SKYSCRAPER;                            break;                        case kGADAdSizeSmartBannerPortrait:                            bannerSize = AdSize.SMART_BANNER;                            break;                        case kGADAdSizeSmartBannerLandscape:                            bannerSize = AdSize.SMART_BANNER;                            break;                        case kGADAdSizeInvalid:                        default:                            break;                    }                    _appActiviy.adView = new AdView(_appActiviy.activity);                    _appActiviy.adView.setAdSize(AdSize.BANNER);                    _appActiviy.adView.setAdUnitId(adUnitID);                    AdRequest adRequest = new AdRequest.Builder()                            .addTestDevice(AdRequest.DEVICE_ID_EMULATOR)                            .addTestDevice("HASH_DEVICE_ID")                            .build();                    _appActiviy.adView.loadAd(adRequest);                    _appActiviy.adView.setBackgroundColor(Color.BLACK);                    _appActiviy.adView.setBackgroundColor(0);                }            });        }    }    public void hideBanner()    {        _appActiviy.activity.runOnUiThread(new Runnable() {            @Override            public void run() {                _appActiviy.adView.setVisibility(View.INVISIBLE);            }        });    }    public void showBanner(final int x, final int y, final int width, final int height, final int theGravity)    {        _appActiviy.activity.runOnUiThread(new Runnable() {            @Override            public void run() {                _appActiviy.adView.setVisibility(View.VISIBLE);                if (_layout != null && _appActiviy._bannerLayout != null && _appActiviy.adView.getParent() != null) {                    _appActiviy._bannerLayout.removeView(_appActiviy.adView);                    _layout.removeView(_appActiviy._bannerLayout);                    _appActiviy._bannerLayout = null;                }                if (_layout == null) {                    _layout = new RelativeLayout(_appActiviy.activity);                    _appActiviy.activity.addContentView(_layout, new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT));                    _layout.setGravity(Gravity.TOP | Gravity.LEFT);                }                if (_appActiviy.adView.getParent() == null) {                    //View parent = (View)_layout.getParent();                    //int width = _appActiviy.getDisplaySize(_appActiviy.getWindowManager().getDefaultDisplay()).x;                    //int height = _appActiviy.getDisplaySize(_appActiviy.getWindowManager().getDefaultDisplay()).y;                    _appActiviy._bannerLayout = new RelativeLayout(_appActiviy.activity);                    RelativeLayout.LayoutParams params = new RelativeLayout.LayoutParams(width, height);                    if (theGravity == -1) {                        params.leftMargin = x;                        params.topMargin = y;//parent.getHeight() + y - height;                    }                    _layout.addView(_appActiviy._bannerLayout, params);                    int gravity = theGravity;                    switch (gravity) {                        case kBannerGravityCenterLeft:                            _appActiviy._bannerLayout.setGravity(Gravity.CENTER_VERTICAL | Gravity.LEFT);                            break;                        case kBannerGravityBottomLeft:                            _appActiviy._bannerLayout.setGravity(Gravity.BOTTOM | Gravity.LEFT);                            break;                        case kBannerGravityTopCenter:                            _appActiviy._bannerLayout.setGravity(Gravity.TOP | Gravity.CENTER_HORIZONTAL);                            break;                        case kBannerGravityCenter:                            _appActiviy._bannerLayout.setGravity(Gravity.CENTER);                            break;                        case kBannerGravityBottomCenter:                            _appActiviy._bannerLayout.setGravity(Gravity.BOTTOM | Gravity.CENTER_HORIZONTAL);                            break;                        case kBannerGravityTopRight:                            _appActiviy._bannerLayout.setGravity(Gravity.TOP | Gravity.RIGHT);                            break;                        case kBannerGravityCenterRight:                            _appActiviy._bannerLayout.setGravity(Gravity.CENTER_VERTICAL | Gravity.RIGHT);                            break;                        case kBannerGravityBottomRight:                            _appActiviy._bannerLayout.setGravity(Gravity.BOTTOM | Gravity.RIGHT);                            break;                        case kBannerGravityTopLeft:                        default:                            _appActiviy._bannerLayout.setGravity(Gravity.TOP | Gravity.LEFT);                            break;                    }                    _appActiviy._bannerLayout.addView(_appActiviy.adView, new RelativeLayout.LayoutParams(LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT));                }            }        });    }    private void createInterstitial(final String adUnitID) {        _appActiviy = this;        if(this.activity!=null) {            this.activity.runOnUiThread(new Runnable() {                @Override                public void run() {                    if (_appActiviy.interstitial == null)                    {                        _appActiviy.interstitial = new ArrayList<InterstitialAd>();                    }                    // Создание межстраничного объявления.                    InterstitialAd interstitialAd =new InterstitialAd(_appActiviy.activity);                    _appActiviy.interstitial.add(interstitialAd);                    _appActiviy.interstitial.get(_appActiviy.interstitial.size()-1).setAdUnitId(adUnitID);                    _appActiviy.interstitial.get(_appActiviy.interstitial.size()-1).setAdListener(new AdListener() {                        public void onAdLoaded() {                            if (_appActiviy.interstitial.get(0).isLoaded()) {                                _appActiviy.interstitial.get(0).show();                                //_appActiviy.interstitial = null;                                _appActiviy.interstitial.remove(0);                            } else {                                Log.d("=======", "Interstitial ad was not ready to be shown.");                            }                        }                        public void onAdFailedToLoad(int errorCode) {                            String message = String.format("onAdFailedToLoad (%s)", _appActiviy.getErrorReason(errorCode));                            Log.d("=========", message);                        }                    });                }            });        }    }    private void showInterstitial() {        // Загрузка adView с объявлением.        _appActiviy.activity.runOnUiThread(new Runnable() {            @Override            public void run() {                //_appActiviy.displayInterstitial();                if(_appActiviy.interstitial.size()>0) {                    // Создание запроса объявления.                    AdRequest adRequest = new AdRequest.Builder().build();                    // Запуск загрузки межстраничного объявления.                    _appActiviy.interstitial.get(0).loadAd(adRequest);                }            }        });    }    /** Gets a string error reason from an error code. */    private String getErrorReason(int errorCode) {        String errorReason = "";        switch(errorCode) {            case AdRequest.ERROR_CODE_INTERNAL_ERROR:                errorReason = "Internal error";                break;            case AdRequest.ERROR_CODE_INVALID_REQUEST:                errorReason = "Invalid request";                break;            case AdRequest.ERROR_CODE_NETWORK_ERROR:                errorReason = "Network Error";                break;            case AdRequest.ERROR_CODE_NO_FILL:                errorReason = "No fill";                break;        }        return errorReason;    }    @Override    public void setContext(Context context) {        this.context = context;    }    public void setActivity(Activity activity)    {        this.activity = activity;    }    private void registerProcessor(String key, ProcessorEngine.CallHandler callHandler) {        ProcessorEngine.getInstance().registerProcessor("AdmobBunch", key, callHandler);    }}